export const getCompanies = async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        const info = await getUserInfo(token);

        if (!info || info.user.status !== 1) {
            return res.status(401).json({ success: false, message: "Unauthorized" });
        }

        const organizationId = info.user.organization_id || info.user._id;

        const populateFields = [
            { path: "contacts" },
            { path: "owner_id", select: "name email" },
            { path: "organization_id", select: "name email" },
            { path: "createdBy", select: "name email" },
            { path: "updatedBy", select: "name email" },
        ];

        // Single company by ID
        const companyId = req.query.id;
        if (companyId) {
            const company = await Company.findOne({ _id: companyId, organization_id: organizationId })
                .populate(populateFields);

            if (!company) {
                return res.status(404).json({ success: false, message: "Company not found" });
            }

            return res.json({ success: true, company });
        }

        // Multiple companies with pagination + filters
        const page = Math.max(1, parseInt(req.query.page) || 1);
        const limit = Math.min(parseInt(req.query.limit) || 50, 100);
        const skip = (page - 1) * limit;

        const status = req.query.status !== undefined ? parseInt(req.query.status) : 1;
        const search = req.query.search?.trim();

        const query = { organization_id: organizationId };
        if (!isNaN(status)) query.status = status;
        if (search) query.name = { $regex: search, $options: "i" };

        const [companies, total] = await Promise.all([
            Company.find(query)
                .skip(skip)
                .limit(limit)
                .populate(populateFields),
            Company.countDocuments(query)
        ]);

        const totalPages = Math.ceil(total / limit);

        res.json({
            success: true,
            companies,
            pagination: {
                total,
                page,
                limit,
                totalPages,
                hasNextPage: page < totalPages,
                hasPreviousPage: page > 1,
            }
        });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
};
